{"ast":null,"code":"var _jsxFileName = \"/Users/avianl/Documents/Projects/weather-app/src/components/FetchGeocode.js\";\nimport React from \"react\";\nimport Form from \"./Form\";\nimport WeatherData from \"./WeatherData\";\n\nclass FetchGeocode extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: undefined,\n      long: undefined,\n      status: undefined,\n      summaryHourly: undefined,\n      temperature: undefined,\n      feelsLike: undefined\n    };\n\n    this.getWeather = async (lat, long) => {\n      const api_call2 = await fetch(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/f8ab38547a7a46716f7676b1977d1709/${lat},${long}?units=si`);\n      const data2 = await api_call2.json();\n      console.log(data2);\n      this.setState({\n        summaryHourly: data2.hourly.summary,\n        temperature: data2.currently.temperature,\n        feelsLike: data2.currently.apparentTemperature\n      });\n    };\n\n    this.getCoord = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const api_call = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${city}&key=AIzaSyATXxQ4r1AW5HYynWY37rAAu95zVvVPQsE`);\n      const data = await api_call.json();\n      this.setState({\n        status: data.status\n      });\n\n      if (this.state.status === \"OK\") {\n        this.setState({\n          lat: data.results[0].geometry.location.lat,\n          long: data.results[0].geometry.location.lng\n        });\n        this.getWeather(this.state.lat, this.state.long);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Form, {\n      getCoord: this.getCoord,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(WeatherData, {\n      summaryHourly: this.state.summaryHourly,\n      temperature: this.state.temperature,\n      feelsLike: this.state.feelsLike,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default FetchGeocode;","map":{"version":3,"sources":["/Users/avianl/Documents/Projects/weather-app/src/components/FetchGeocode.js"],"names":["React","Form","WeatherData","FetchGeocode","Component","state","lat","undefined","long","status","summaryHourly","temperature","feelsLike","getWeather","api_call2","fetch","data2","json","console","log","setState","hourly","summary","currently","apparentTemperature","getCoord","e","preventDefault","city","target","elements","value","api_call","data","results","geometry","location","lng","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;AAAA,SACzCC,KADyC,GACjC;AACNC,MAAAA,GAAG,EAAEC,SADC;AAENC,MAAAA,IAAI,EAAED,SAFA;AAGNE,MAAAA,MAAM,EAAEF,SAHF;AAING,MAAAA,aAAa,EAAEH,SAJT;AAKNI,MAAAA,WAAW,EAAEJ,SALP;AAMNK,MAAAA,SAAS,EAAEL;AANL,KADiC;;AAAA,SAUzCM,UAVyC,GAU5B,OAAOP,GAAP,EAAYE,IAAZ,KAAqB;AAChC,YAAMM,SAAS,GAAG,MAAMC,KAAK,CACxB,yGAAwGT,GAAI,IAAGE,IAAK,WAD5F,CAA7B;AAGA,YAAMQ,KAAK,GAAG,MAAMF,SAAS,CAACG,IAAV,EAApB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,WAAKI,QAAL,CAAe;AACXV,QAAAA,aAAa,EAAEM,KAAK,CAACK,MAAN,CAAaC,OADjB;AAEXX,QAAAA,WAAW,EAAEK,KAAK,CAACO,SAAN,CAAgBZ,WAFlB;AAGXC,QAAAA,SAAS,EAAEI,KAAK,CAACO,SAAN,CAAgBC;AAHhB,OAAf;AAKH,KArB0C;;AAAA,SAsBzCC,QAtByC,GAsB9B,MAAMC,CAAN,IAAW;AACpBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAApC;AACA,YAAMC,QAAQ,GAAG,MAAMjB,KAAK,CACzB,6DAA4Da,IAAK,8CADxC,CAA5B;AAGA,YAAMK,IAAI,GAAG,MAAMD,QAAQ,CAACf,IAAT,EAAnB;AACA,WAAKG,QAAL,CAAc;AACZX,QAAAA,MAAM,EAAEwB,IAAI,CAACxB;AADD,OAAd;;AAIA,UAAI,KAAKJ,KAAL,CAAWI,MAAX,KAAsB,IAA1B,EAAgC;AAC9B,aAAKW,QAAL,CAAc;AACZd,UAAAA,GAAG,EAAE2B,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBC,QAAhB,CAAyBC,QAAzB,CAAkC9B,GAD3B;AAEZE,UAAAA,IAAI,EAAEyB,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBC,QAAhB,CAAyBC,QAAzB,CAAkCC;AAF5B,SAAd;AAKA,aAAKxB,UAAL,CAAgB,KAAKR,KAAL,CAAWC,GAA3B,EAAgC,KAAKD,KAAL,CAAWG,IAA3C;AACD;AACF,KAzCwC;AAAA;;AA2CzC8B,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAKb,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,WAAD;AACI,MAAA,aAAa,EAAE,KAAKpB,KAAL,CAAWK,aAD9B;AAEI,MAAA,WAAW,EAAE,KAAKL,KAAL,CAAWM,WAF5B;AAGI,MAAA,SAAS,EAAE,KAAKN,KAAL,CAAWO,SAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAUD;;AAtDwC;;AAyD3C,eAAeT,YAAf","sourcesContent":["import React from \"react\";\nimport Form from \"./Form\";\nimport WeatherData from \"./WeatherData\";\n\nclass FetchGeocode extends React.Component {\n  state = {\n    lat: undefined,\n    long: undefined,\n    status: undefined,\n    summaryHourly: undefined,\n    temperature: undefined,\n    feelsLike: undefined\n  };\n\n  getWeather = async (lat, long) => {\n    const api_call2 = await fetch(\n        `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/f8ab38547a7a46716f7676b1977d1709/${lat},${long}?units=si`\n    );\n    const data2 = await api_call2.json();\n    console.log(data2);\n    this.setState ({\n        summaryHourly: data2.hourly.summary,\n        temperature: data2.currently.temperature,\n        feelsLike: data2.currently.apparentTemperature\n    })\n}\n  getCoord = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api_call = await fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?address=${city}&key=AIzaSyATXxQ4r1AW5HYynWY37rAAu95zVvVPQsE`\n    );\n    const data = await api_call.json();\n    this.setState({\n      status: data.status\n    });\n\n    if (this.state.status === \"OK\") {\n      this.setState({\n        lat: data.results[0].geometry.location.lat,\n        long: data.results[0].geometry.location.lng\n      });\n\n      this.getWeather(this.state.lat, this.state.long);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Form getCoord={this.getCoord} />\n        <WeatherData \n            summaryHourly={this.state.summaryHourly} \n            temperature={this.state.temperature} \n            feelsLike={this.state.feelsLike} \n        />\n      </div>\n    );\n  }\n}\n\nexport default FetchGeocode;\n"]},"metadata":{},"sourceType":"module"}